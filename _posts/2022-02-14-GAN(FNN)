---
layout: single
title:  "GAN(FNN)"
categories: coding_GAN
tag: [python] 
toc: true
author_profile: false #true
sidebar:
    nav: "docs"
search: true #false:검색기능/ 검색되지 않음
---
## GAN 구현하기

###  GAN 모델구성


```python
# 라이브러리 정의
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.datasets import mnist
from tensorflow.keras.layers import Dense, Flatten, Reshape, LeakyReLU 
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# 모델 차원정의
img_rows = 28
img_cols = 28
channels = 1
z_dim = 100

img_shape = (img_cols, img_rows, channels)

# 구성요소: 생성자
def build_generator(img_shape, z_dim):
    model = Sequential()
    model.add(Dense(128, input_dim=z_dim))
    model.add(LeakyReLU(alpha=0.01))
    model.add(Dense(28*28*1, activation='tanh'))
    model.add(Reshape(img_shape))
    return model

# 구성요소: 판별자
def build_discriminator(img_shape):
    model = Sequential()
    model.add(Flatten(input_shape=img_shape))
    model.add(Dense(128))
    model.add(LeakyReLU(alpha = 0.01))
    model.add(Dense(1, activation='sigmoid'))
    return model
    

# GAN 모델구성
def build_gan(generator, discriminator):
    
    model = Sequential() 
    
    #생성자 -> 판별자로 연결
    model.add(generator)
    model.add(discriminator)
    return model



# 판별자 모델 만들고 컴파일하기
discriminator = build_discriminator(img_shape)
discriminator.compile(loss='binary_crossentropy', optimizer = Adam(), metrics=['accuracy'])


# 생성자 모델 만들기
generator = build_generator(img_shape, z_dim)

# 생성자 훈련하는 동안 판별자의 파라미터를 유지
discriminator.trainable = False

# 생성자를 훈련하기 위해 동결된 판별자로 GAN모델 만들고 컴파일
gan =build_gan(generator, discriminator)
gan.compile(loss='binary_crossentropy', optimizer=Adam())


```
